package www.bit;

public class BinaryTree {
    private Node root;
    public BinaryTree(){
        root = null;
    }
    public static void postOrder(Node localRoot){
        if(localRoot!=null){
            postOrder(localRoot.left);
            postOrder(localRoot.right);
            System.out.print(localRoot.data+" ");
        }
    }
    public  void postOrder(){
        this.postOrder(this.root);
    }
    public void initTree(int[] perOrder,int[] inOrder){
        this.root = initTree(perOrder,0,perOrder.length-1,inOrder,0,inOrder.length-1);
    }
    public static Node initTree(int[] preOrder,int start1,int end1,int[] inOrder,int start2,int end2) {
        if (start1 > end1 || start2 > end2) {
            return null;
        }
        int rootdata = preOrder[start1];
        Node head = new Node(rootdata);
        //找根节点的位置
        int nodeIndex = findIndex(inOrder,rootdata,start2,end2);
        //构建左子树
        Node left = initTree(preOrder,start1+1,start1+nodeIndex-start2,inOrder,start2,nodeIndex-1);
        //构建右子树
        Node right = initTree(preOrder,start1+nodeIndex-start2+1,end1,inOrder,nodeIndex+1,end2);
        head.left = left;
        head.right = right;
        return head;
    }
    public static int findIndex(int []a,int data,int begin,int end){
        for (int i = 0;i < a.length;i++){
            if(a[i] == data){
                return i;
            }
        }
        return -1;
    }
    public static void main(String[] args) {
        int[] preOrder = {1,2,4,8,9,5,10,3,6,7};
        int[] inOrder = {8,4,9,2,10,5,1,6,3,7};
        BinaryTree biTree = new BinaryTree();
        biTree.initTree(preOrder, inOrder);
        System.out.print("二叉树的后序遍历:");
        biTree.postOrder();
    }
}
